{
    "version": 3,
    "file": "index.js",
    "sourceRoot": "",
    "sources": [
        "/ts/index.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\r\n * @file opengl demo\r\n */\r\n\r\nconst testFs = require(\"./shaders/test-fs.glsl\");\r\nconst testVs = require(\"./shaders/test-vs.glsl\");\r\n\r\n$(function () {\r\n    let cubeVerticesBuffer;\r\n    let cubeVerticesIndexBuffer;\r\n    let mvMatrix;\r\n    let shaderProgram;\r\n    let vertexPositionAttribute;\r\n    let perspectiveMatrix;\r\n    let squareVerticesColorBuffer;\r\n    let vertexColorAttribute;\r\n\r\n    const main = $('#main')[0] as HTMLCanvasElement;\r\n    const size = main.getClientRects()[0];\r\n\r\n    main.height = size.height;\r\n    main.width = size.width;\r\n\r\n    const webglContextOption = {\r\n        failIfMajorPerformanceCaveat: false,\r\n        alpha: false,\r\n        antialias: true,\r\n        depth: true,\r\n        premultipliedAlpha: true,\r\n        preserveDrawingBuffer: true,\r\n        stencil: true,\r\n    };\r\n\r\n    const webglContext = main.getContext('webgl', webglContextOption) ||\r\n        main.getContext('experimental-webgl', webglContextOption);\r\n\r\n    // Set clear color to black, fully opaque\r\n    webglContext.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    // Enable depth testing\r\n    webglContext.enable(webglContext.DEPTH_TEST);\r\n    // Near things obscure far things\r\n    webglContext.depthFunc(webglContext.LEQUAL);\r\n    // Clear the color as well as the depth buffer.\r\n    // tslint:disable-next-line:no-bitwise\r\n    webglContext.clear(webglContext.COLOR_BUFFER_BIT | webglContext.DEPTH_BUFFER_BIT);\r\n\r\n    webglContext.viewport(0, 0, main.width, main.height);\r\n\r\n    initShaders(webglContext);\r\n    initBuffers(webglContext);\r\n\r\n    let startTime = Date.now();\r\n    const interval = 1000 / 60;\r\n\r\n    function drawLoop() {\r\n        const currentTime = Date.now();\r\n        const delta = currentTime - startTime;\r\n        if (interval < delta) {\r\n            startTime = currentTime;\r\n            drawScence(webglContext);\r\n        }\r\n        requestAnimationFrame(drawLoop);\r\n    }\r\n\r\n    function initShaders(gl) {\r\n        const fragmentShader = testFs(gl);\r\n        const vertexShader = testVs(gl);\r\n\r\n        // Create the shader program\r\n\r\n        shaderProgram = gl.createProgram();\r\n        gl.attachShader(shaderProgram, vertexShader);\r\n        gl.attachShader(shaderProgram, fragmentShader);\r\n        gl.linkProgram(shaderProgram);\r\n\r\n        // If creating the shader program failed, alert\r\n\r\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n            alert(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(shaderProgram));\r\n        }\r\n\r\n        gl.useProgram(shaderProgram);\r\n\r\n        vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\r\n        gl.enableVertexAttribArray(vertexPositionAttribute);\r\n\r\n        vertexColorAttribute = gl.getAttribLocation(shaderProgram, \"aVertexColor\");\r\n        gl.enableVertexAttribArray(vertexColorAttribute);\r\n    }\r\n\r\n    function initBuffers(gl) {\r\n        const vertices = [\r\n            // Front face\r\n            -1.0, -1.0, 1.0,\r\n            1.0, -1.0, 1.0,\r\n            1.0, 1.0, 1.0,\r\n            -1.0, 1.0, 1.0,\r\n\r\n            // Back face\r\n            -1.0, -1.0, -1.0,\r\n            -1.0, 1.0, -1.0,\r\n            1.0, 1.0, -1.0,\r\n            1.0, -1.0, -1.0,\r\n\r\n            // Top face\r\n            -1.0, 1.0, -1.0,\r\n            -1.0, 1.0, 1.0,\r\n            1.0, 1.0, 1.0,\r\n            1.0, 1.0, -1.0,\r\n\r\n            // Bottom face\r\n            -1.0, -1.0, -1.0,\r\n            1.0, -1.0, -1.0,\r\n            1.0, -1.0, 1.0,\r\n            -1.0, -1.0, 1.0,\r\n\r\n            // Right face\r\n            1.0, -1.0, -1.0,\r\n            1.0, 1.0, -1.0,\r\n            1.0, 1.0, 1.0,\r\n            1.0, -1.0, 1.0,\r\n\r\n            // Left face\r\n            -1.0, -1.0, -1.0,\r\n            -1.0, -1.0, 1.0,\r\n            -1.0, 1.0, 1.0,\r\n            -1.0, 1.0, -1.0,\r\n        ];\r\n\r\n        cubeVerticesBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n        const colors = [\r\n            [1.0, 1.0, 1.0, 1.0],    // Front face: white\r\n            [1.0, 0.0, 0.0, 1.0],    // Back face: red\r\n            [0.0, 1.0, 0.0, 1.0],    // Top face: green\r\n            [0.0, 0.0, 1.0, 1.0],    // Bottom face: blue\r\n            [1.0, 1.0, 0.0, 1.0],    // Right face: yellow\r\n            [1.0, 0.0, 1.0, 1.0],     // Left face: purple\r\n        ];\r\n\r\n        let generatedColors = [];\r\n\r\n        for (let j = 0; j < 6; j++) {\r\n            const c = colors[j];\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                generatedColors = generatedColors.concat(c);\r\n            }\r\n        }\r\n\r\n\r\n        squareVerticesColorBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesColorBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(generatedColors), gl.STATIC_DRAW);\r\n\r\n\r\n        cubeVerticesIndexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVerticesIndexBuffer);\r\n\r\n        // This array defines each face as two triangles, using the\r\n        // indices into the vertex array to specify each triangle's\r\n        // position.\r\n\r\n        const cubeVertexIndices = [\r\n            0, 1, 2,    0, 2, 3,    // front\r\n            4, 5, 6,    4, 6, 7,    // back\r\n            8, 9, 10,   8, 10, 11,   // top\r\n            12, 13, 14, 12, 14, 15,   // bottom\r\n            16, 17, 18, 16, 18, 19,   // right\r\n            20, 21, 22, 20, 22, 23,    // left\r\n        ]\r\n\r\n        // Now send the element array to GL\r\n\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\r\n            new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);\r\n    }\r\n\r\n    // Establish the perspective with which we want to view the\r\n    // scene. Our field of view is 45 degrees, with a width/height\r\n    // ratio of 640:480, and we only want to see objects between 0.1 units\r\n    // and 100 units away from the camera.\r\n    perspectiveMatrix = makePerspective(45, size.width / size.height, 0.1, 100.0);\r\n\r\n    // Set the drawing position to the \"identity\" point, which is\r\n    // the center of the scene.\r\n\r\n    // Draw the square by binding the array buffer to the square's vertices\r\n    // array, setting attributes, and pushing it to GL.\r\n\r\n    webglContext.bindBuffer(webglContext.ARRAY_BUFFER, cubeVerticesBuffer);\r\n    webglContext.vertexAttribPointer(vertexPositionAttribute, 3, webglContext.FLOAT, false, 0, 0);\r\n\r\n    webglContext.bindBuffer(webglContext.ARRAY_BUFFER, squareVerticesColorBuffer);\r\n    webglContext.vertexAttribPointer(vertexColorAttribute, 4, webglContext.FLOAT, false, 0, 0);\r\n\r\n    webglContext.bindBuffer(webglContext.ELEMENT_ARRAY_BUFFER, cubeVerticesIndexBuffer);\r\n\r\n    loadIdentity();\r\n\r\n    // drawScence(webglContext);\r\n    drawLoop();\r\n\r\n    function drawScence(gl) {\r\n        // Clear the canvas before we start drawing on it.\r\n\r\n        // tslint:disable-next-line:no-bitwise\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\r\n        // Now move the drawing position a bit to where we want to start\r\n        // drawing the square.\r\n\r\n        mvTranslate([-0.0, 0.0, -1.0]);\r\n\r\n        setMatrixUniforms(gl);\r\n\r\n        gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    function loadIdentity() {\r\n        mvMatrix = Matrix.I(4);\r\n    }\r\n\r\n    function multMatrix(m) {\r\n        mvMatrix = mvMatrix.x(m);\r\n    }\r\n\r\n    function mvTranslate(v) {\r\n        multMatrix(Matrix.Translation($V([v[0], v[1], v[2]])).ensure4x4());\r\n    }\r\n\r\n    function setMatrixUniforms(gl) {\r\n        const pUniform = gl.getUniformLocation(shaderProgram, \"uPMatrix\");\r\n        gl.uniformMatrix4fv(pUniform, false, new Float32Array(perspectiveMatrix.flatten()));\r\n\r\n        const mvUniform = gl.getUniformLocation(shaderProgram, \"uMVMatrix\");\r\n        gl.uniformMatrix4fv(mvUniform, false, new Float32Array(mvMatrix.flatten()));\r\n    }\r\n});\r\n"
    ]
}